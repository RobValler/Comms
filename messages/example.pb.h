// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: example.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_example_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_example_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 4000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 4000000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_example_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_example_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_example_2eproto;
class test_msg;
class test_msgDefaultTypeInternal;
extern test_msgDefaultTypeInternal _test_msg_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::test_msg* Arena::CreateMaybeMessage<::test_msg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class test_msg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test_msg) */ {
 public:
  inline test_msg() : test_msg(nullptr) {}
  virtual ~test_msg();

  test_msg(const test_msg& from);
  test_msg(test_msg&& from) noexcept
    : test_msg() {
    *this = ::std::move(from);
  }

  inline test_msg& operator=(const test_msg& from) {
    CopyFrom(from);
    return *this;
  }
  inline test_msg& operator=(test_msg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const test_msg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const test_msg* internal_default_instance() {
    return reinterpret_cast<const test_msg*>(
               &_test_msg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(test_msg& a, test_msg& b) {
    a.Swap(&b);
  }
  inline void Swap(test_msg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(test_msg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline test_msg* New() const final {
    return CreateMaybeMessage<test_msg>(nullptr);
  }

  test_msg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<test_msg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const test_msg& from);
  void MergeFrom(const test_msg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(test_msg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test_msg";
  }
  protected:
  explicit test_msg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_example_2eproto);
    return ::descriptor_table_example_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTestStringFieldNumber = 1,
    kTestIntFieldNumber = 2,
  };
  // string test_string = 1;
  void clear_test_string();
  const std::string& test_string() const;
  void set_test_string(const std::string& value);
  void set_test_string(std::string&& value);
  void set_test_string(const char* value);
  void set_test_string(const char* value, size_t size);
  std::string* mutable_test_string();
  std::string* release_test_string();
  void set_allocated_test_string(std::string* test_string);
  private:
  const std::string& _internal_test_string() const;
  void _internal_set_test_string(const std::string& value);
  std::string* _internal_mutable_test_string();
  public:

  // int32 test_int = 2;
  void clear_test_int();
  ::PROTOBUF_NAMESPACE_ID::int32 test_int() const;
  void set_test_int(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_test_int() const;
  void _internal_set_test_int(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:test_msg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr test_string_;
  ::PROTOBUF_NAMESPACE_ID::int32 test_int_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_example_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// test_msg

// string test_string = 1;
inline void test_msg::clear_test_string() {
  test_string_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& test_msg::test_string() const {
  // @@protoc_insertion_point(field_get:test_msg.test_string)
  return _internal_test_string();
}
inline void test_msg::set_test_string(const std::string& value) {
  _internal_set_test_string(value);
  // @@protoc_insertion_point(field_set:test_msg.test_string)
}
inline std::string* test_msg::mutable_test_string() {
  // @@protoc_insertion_point(field_mutable:test_msg.test_string)
  return _internal_mutable_test_string();
}
inline const std::string& test_msg::_internal_test_string() const {
  return test_string_.Get();
}
inline void test_msg::_internal_set_test_string(const std::string& value) {
  
  test_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void test_msg::set_test_string(std::string&& value) {
  
  test_string_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:test_msg.test_string)
}
inline void test_msg::set_test_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  test_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:test_msg.test_string)
}
inline void test_msg::set_test_string(const char* value,
    size_t size) {
  
  test_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:test_msg.test_string)
}
inline std::string* test_msg::_internal_mutable_test_string() {
  
  return test_string_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* test_msg::release_test_string() {
  // @@protoc_insertion_point(field_release:test_msg.test_string)
  return test_string_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void test_msg::set_allocated_test_string(std::string* test_string) {
  if (test_string != nullptr) {
    
  } else {
    
  }
  test_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), test_string,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:test_msg.test_string)
}

// int32 test_int = 2;
inline void test_msg::clear_test_int() {
  test_int_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 test_msg::_internal_test_int() const {
  return test_int_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 test_msg::test_int() const {
  // @@protoc_insertion_point(field_get:test_msg.test_int)
  return _internal_test_int();
}
inline void test_msg::_internal_set_test_int(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  test_int_ = value;
}
inline void test_msg::set_test_int(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_test_int(value);
  // @@protoc_insertion_point(field_set:test_msg.test_int)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_example_2eproto
